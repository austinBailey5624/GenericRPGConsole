#BlueJ class context
comment0.target=RPGWorld
comment0.text=\n\ Write\ a\ description\ of\ class\ RPGWorld\ here.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=x\ y\ worldBase\ party
comment1.target=RPGWorld(int,\ int,\ char[][],\ Party)
comment1.text=\n\ @param\ \:\ (pre)\ None\n\ @param\ \:\ (post)\ Creates\ a\ new\ object\ of\ type\ World\ with\ set\ parameters\n\ @return\ \:\ None\n
comment10.params=sel
comment10.target=boolean\ characterMove(int)
comment10.text=\n\ @param\ \:\ (pre)\ Existing\ Twon\ object\n\ @param\ \:\ (post)\ Handles\ all\ menu\ interaction\ and\ display\ for\ traversing\ through\ the\ town\n\ @return\ \:\ None\n\n\ \ \ \ public\ void\ menuInteraction()\n\ \ \ \ {\n\ \ \ \ \ \ \ \ final\ String\ menu\ \=\ "\\n\\nYou\ are\ currently\ at\ the\ coordinate\ ("\ +\ curPosX\ +\ ",\ "\ +\ curPosY\ +\ ").\ Which\ direction\ would\ you\ like\ to\ move?\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ "1.\ Up\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ "2.\ Down\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ "3.\ Left\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ "4.\ Right\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ "5.\ Menu\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //"6.\ Exit\ Game\\n"\ +\n\ \ \ \ \ \ \ \ \ \ \ \ "Your\ Choice\:\ ";\n\ \ \ \ \ \ \ \ String\ input;\ //input\ as\ string\n\ \ \ \ \ \ \ \ double\ selDouble;\ //menu\ selection\ as\ double\n\ \ \ \ \ \ \ \ int\ selection;\ //menu\ selection\ as\ integer\n\ \ \ \ \ \ \ \ Scanner\ in\ \=\ new\ Scanner(System.in);\ //input\ scanner\n\ \ \ \ \ \ \ \ System.out.print(menu);\ //display\ menu\ options\n\ \ \ \ \ \ \ \ input\ \=\ in.next();\ //get\ user\ input\n\ \ \ \ \ \ \ \ if(\!((input.equals("w"))||(input.equals("a"))||(input.equals("s"))||(input.equals("d"))))\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ while(\!menuInputCheck(input,\ 1,\ 6,\ true))\ //check\ if\ entry\ is\ valid,\ repeat\ input\ if\ not//TODO\ rewrite\ for\ wasd\ implementation\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ System.out.print("Invalid\ menu\ selection,\ please\ choose\ an\ integer\ between\ 1\ and\ 4\ and\ a\\ndestination\ along\ the\ path\ denoted\ by\ P.\\nYour\ choice\:\ ");\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ input\ \=\ in.next();\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\n\ \ \ \ \ \ \ \ \ \ \ \ selDouble\ \=\ Double.parseDouble(input);\ //safe\ parse\n\ \ \ \ \ \ \ \ \ \ \ \ selection\ \=\ (int)\ selDouble;\ //set\ selection\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ else\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ selection\=7;//dummy\ value\ outside\ of\ range\n\ \ \ \ \ \ \ \ }\n\n\ \ \ \ \ \ \ \ if(input.equals("w"))\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ selection\ \=\ 1;\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ else\ if\ (input.equals("a"))\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ selection\ \=\ 3;\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ else\ if\ (input.equals("s"))\ \n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ selection\ \=\ 2;\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ else\ if\ (input.equals("d"))\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ selection\ \=\ 4;\n\ \ \ \ \ \ \ \ }\n\n\ \ \ \ \ \ \ \ if(validMoveCheck(selection))\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (selection\ <\ 5)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ stillInArea\ \=\ characterMove(selection);\ //store\ if\ still\ in\ world\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //clearScreen();\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\ if(selection\=\=5)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ m_party.menu();\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\ if(input.equals("w"))\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ stillInArea\=characterMove(1);\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\ if(input.equals("a"))\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ stillInArea\=characterMove(3);\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\ if(input.equals("s"))\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ stillInArea\=characterMove(2);\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\ if(input.equals("d"))\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ stillInArea\=characterMove(4);\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\ if(selection\=\=6)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ gameExit\ \=\ true;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ else\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ System.out.println("Sorry,\ we\ didn't\ understand\ your\ input");\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ else\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.println("Invalid\ move.");\n\ \ \ \ \ \ \ \ \ \ \ \ displayArea(curAreaArr);\n\ \ \ \ \ \ \ \ \ \ \ \ menuInteraction();\n\ \ \ \ \ \ \ \ }\n\n\ \ \ \ \ \ \ \ if\ (chestFound\ \=\=\ true)\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ foundChest();\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }\n\n\ \ \ \ /**\n\ @param\ \:\ (pre)\ Movement\ selection\ has\ been\ made\n\ @param\ \:\ (post)\ Checks\ to\ see\ if\ player\ has\ reached\ a\ town\ border\n\ @return\ \:\ Returns\ true\ if\ player\ is\ still\ in\ the\ town,\ false\ otherwise\n
comment11.params=area
comment11.target=void\ displayArea(char[][])
comment11.text=\n\ @param\ \:\ (pre)\ Existing\ class\ object\ that\ implements\ Place\n\ @param\ \:\ (post)\ Displays\ the\ current\ area\ map\ with\ player\ token\n\ @return\ \:\ None\n
comment12.params=area
comment12.target=char[][]\ setBaseArea(char[][])
comment12.text=\n\ @param\ \:\ (pre)\ Existing\ class\ object\ that\ implements\ Place\n\ @param\ \:\ (post)\ Sets\ the\ base\ area\ map\ for\ the\ object\n\ @return\ \:\ Returns\ the\ array\ containing\ the\ base\ area\n
comment13.params=currentArea\ baseArea
comment13.target=char[][]\ resetArea(char[][],\ char[][])
comment13.text=\n\ @param\ \:\ (pre)\ Existing\ class\ object\ that\ implements\ Place\n\ @param\ \:\ (post)\ Duplicates\ the\ passed\ base\ area\ array,\ effective\ reset\ of\ the\ area\ with\ no\ player\ token\n\ @return\ \:\ Returns\ the\ duplicated\ array\n
comment14.params=
comment14.target=void\ foundChest()
comment2.params=
comment2.target=void\ act()
comment2.text=\n\ Act\ -\ do\ whatever\ the\ RPGWorld\ wants\ to\ do.\ This\ method\ is\ called\ whenever\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\n
comment3.params=
comment3.target=char[][]\ getArea()
comment3.text=\n\ @param\ \:\ (pre)\ curAreaArr\ initialized\n\ @param\ \:\ (post)\ None\n\ @return\ \:\ Return\ the\ 2d\ array\ for\ the\ current\ area\n
comment4.params=
comment4.target=char[][]\ getBase()
comment5.params=
comment5.target=int[]\ getCurrentLoc()
comment5.text=\n\ @param\ \:\ (pre)\ curPosX\ and\ curPosY\ initialized\n\ @param\ \:\ (post)\ None\n\ @return\ \:\ Returns\ a\ 2-element\ array\ containing\ (x,\ y)\ coordinates\n
comment6.params=
comment6.target=void\ setCurrentToPrevious()
comment6.text=\n\ @param\ \:\ (pre)\ None\n\ @param\ \:\ (post)\ Sets\ the\ current\ position\ to\ the\ previous\ position\n\ @return\ \:\ None\n
comment7.params=
comment7.target=boolean\ getGameExit()
comment7.text=\n\ @param\ \:\ (pre)\ Initialized\ gameExit\ variable\n\ @param\ \:\ (post)\ None\n\ @return\ \:\ Returns\ the\ value\ of\ gameExit\n
comment8.params=
comment8.target=boolean\ inArea()
comment8.text=\n\ @param\ \:\ (pre)\ Initialized\ variable,\ stillInArea\n\ @param\ \:\ (post)\ None\n\ @return\ \:\ Returns\ true\ if\ still\ in\ the\ area,\ false\ otherwise\n
comment9.params=sel
comment9.target=boolean\ validMoveCheck(int)
comment9.text=\n\ @param\ \:\ (pre)\ Movement\ direction\ chosen\ (sel)\n\ @param\ \:\ (post)\ Checks\ to\ see\ if\ the\ spot\ moved\ to\ is\ valid\ spot\n\ @return\ \:\ Returns\ true\ if\ the\ move\ is\ valid,\ false\ otherwise\n
numComments=15
